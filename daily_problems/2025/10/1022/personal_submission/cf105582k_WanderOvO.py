"""
羊的提示：先不要管平行的约束，先把多边形构造出来，然后再想办法旋转到都是整点的位置
我们考虑先构造一个阶梯，阶梯的边长是 l，其中 l 是某组勾股数里第三个数
阶梯构造好之后，接着直接回到 x 轴上，则 (0, 0) 到这个点的距离是若干倍的 l
当 n 是奇数时，考虑 l 所在的那组勾股数的前两个数，则又确定了一个点的坐标，这个时候多边形就构造出来了
这还不够，因为最后一个点不一定是整点，我们还得凑一个 l 去抵消掉分母，得到的才是整数，所以要取 l^2
下面考虑旋转，要求大家旋转之后到达的位置还是整数，如何做到？
我们考虑 (15, 20, 25)，将 15 这条边再拆分成 9 和 12，这样下面那个也是整数了
旋转的话，考虑 9 12 15 的角，旋转一下就好了
"""

n = int(input())
res = []

if n % 2 == 0:
    res.append((0, 0))
    idx = 2
    x, y = 0, 0
    while idx <= n - 1:
        y += 25
        res.append((x, y))
        x += 25
        res.append((x, y))
        idx += 2
    res.append((x, 0))
    for p in res:
        print(p[0] * 4 - p[1] * 3, p[0] * 3 + p[1] * 4)
else:
    res.append((0, 0))
    idx = 2
    x, y = 0, 0
    while idx <= n - 2:
        y += 25
        res.append((x, y))
        x += 25
        res.append((x, y))
        idx += 2
    if n == 3:
        x += 25
    res.append((x, 0))
    res.append((9 * x // 25, -12 * x // 25))

    # for p in res:
    #     print(p[0], p[1])
    # print()
    for p in res:
        print(p[0] * 5 + p[1] * 12, -p[0] * 12 + p[1] * 5)
